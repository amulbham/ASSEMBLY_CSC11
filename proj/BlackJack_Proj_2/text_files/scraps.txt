mov r6,sp 
	mov r5, #0
	mov r3, arr_cards
	
	/*Setup a loop counter in r4, keep a running card total in r5*/
	mov r4, r1
	
	blt _nCard
	add r5, r5, #1
	mov r0,#0                    /* Set time(0) */
    bl time                      /* Call time */
	bl srand                     /* Call srand */
	
    loop_rand:                      
	bl rand                      /* Call rand */
	mov R1,r0,ASR #1             /* In case random return is negative */
	mov r2,#52                  
		                         
	bl divMod                    /* Call divMod function to get remainder */
	/*Add two to the random number as a deck of cards starts at 2*/
	add R1,#2	
	
	add r7,r3,r5, LSL #2
	str r1,[r7]
	
	cmp r5, #52
	blt _nCard 
	
	
	
	ldr r8, card_1
ldr r8,[r8]
ldr r9, card_2
ldr r9,[r9]













/*After dealer first card, the user must decide to hit or stay, keeps looping till
user hits 21, busts, or decides to stay*/
_hit:
ldr r0, address_of_hit
bl printf

ldr r0, address_of_continue
ldr r1, address_of_hitorstay
bl scanf

ldr R7, address_of_hitorstay
ldr R7, [R7]
ldr r0, pcard_total
ldr r0, [r0]
/*If the user decides to stay, finish the rest of the dealer hand*/
cmp R7, #1
BGT _dealerhand
add r6,r6,#1
add r8,r3,r6,lsl #2
str r8, [r1]
ldr r1,[r1]
bl _getcard
/*Output the card total, store the card total in r8*/

mov r8,r0
mov r1,r0
ldr r0, address_of_message   
bl printf

/*Determine if the user has busted or hit 21, else go back to hit or stay*/
cmp r8, #21
BEQ _dealerhand
BLT _hit
BGT _plose21


/*Output the results of the game to the user*/
_end:
/*If the dealer has busted, the user automatically wins*/
cmp r9, #21
bgt _pwin

/*Else, determine whose card value was higher*/
cmp r8, r9
bgt _pwin
beq _tie
blt _plose

/*Output for the results of the game, win lose or tie*/
_plose:
ldr r0, address_of_lose
bl printf
b _playagain

_pwin:
ldr r0, address_of_win
bl printf
b _playagain

_plose21:
ldr r0, address_of_plose21
bl printf
b _playagain

_tie:
ldr r0, address_of_tie
bl printf
b _playagain

/*After determining a winner, let the player decide if they would like to play again*/
_playagain:
ldr r0, address_of_playagain
bl printf

ldr r0, address_of_continue
ldr r1, pagain
bl scanf

ldr r4, pagain
ldr R4, [R4]

cmp r4, #1
/*Branch to the start of the game loop if yes, else exit the program*/
beq _start
b _exit