/*Name:  Amul Bham
Purpose: Develope BlackJack game in ARM assembly language
		 and throughly implement core concepts learned throughout
		 the semester 
Date: 	 12/16/2015
Main function of Blackjack game*/


/*Below are all the text I had to output to the user 
or the format of input for user inputed text
Includes all the messages displayed for the greeting, 
format of input for hit or miss, and general messages 
to the player to keep them moving along the game*/


.data
.balign 4
opening: .asciz "Welcome to ARM BlackJack!\n"
.balign 4
opening2: .asciz "Would you like to hear the rules to play? 1 for yes, 2 for no\n"
.balign 4
continue: .asciz "%d"
.balign 4
firstcards: .asciz "Now dealing your first two cards...\n"
.balign 4
dfcards: .asciz "Now dealing my first card...\n"
.balign 4
hit: .asciz "Would you like to hit(1) or stay (2)\n"
.balign 4
message: .asciz "card total: %d\n\n"
.balign 4
finish: .asciz "And now the rest of my hand...\n"
.balign 4
win: .asciz "Well played! You win the hand! \n"
.balign 4
lose: .asciz "You lose! Better luck next time!\n"
.balign 4
tie: .asciz "Looks like we have a draw...\n"
.balign 4
lose21: .asciz "You busted! Better luck next time!\n"
.balign 4
playagain: .asciz "Would you like to play again? 1 - yes / 2- no\n"


/*Below are all the memory addresses used for user input*/
.balign 4
continueA: .word 0
.balign 4
hitorstay: .word 0 
.balign 4
pagain1: .word 0

/*Card values - dealer card total and player card total*/
.balign 4
card1: .word 0
.balign 4
card2: .word 0 
.balign 4
total: .word 0
.balign 4
total2: .word 0

.text

.globl main

main:
/*store the link register*/
push {lr}

/*Output the greeting, and rules if the user does not know how to play*/
ldr R0,address_of_opening
bl printf

ldr R0, address_of_opening2
bl printf

ldr R0, address_of_continue
ldr R1, address_of_continueA
bl scanf

ldr r6, address_of_continueA
ldr r6, [r6]

cmp r6, #2
BGE _start
bl _greeting


_start:	
/*Output the players first two cards*/
ldr R0, address_of_firstcards
bl printf


mov r8, sp

	mov r4, #0
	mov r5, #0
	sub sp, sp, #208
	/*Setup a loop counter in r4, keep a running card total in r5*/
	
	mov r0,#0                    /* Set time(0) */
    bl time                      /* Call time */
	bl srand                     /* Call srand */
	
	_nCard:
	bl rand                      /* Call rand */
	mov R1,r0,ASR #1             /* In case random return is negative */
	mov r2,#52                  
		                         
	bl divMod                    /* Call divMod function to get remainder */
	/*Add two to the random number as a deck of cards starts at 2*/
	add R1,#2
    add r4,#1
	cmp r4,#20
	blt _nCard
	mov r4, #0
	str r1,[sp,r5,LSL #2]
	add r5, r5, #1
	cmp r5, #52
	blt _nCard	

mov sp, r8



mov r5, #52
mov r7,#0
ldr r0, pcard_total
ldr r0,[r0]
mov r8, #0
_phand:
ldr r1,[sp,-r5,lsl #2]
bl _getcard
sub r5, r5, #20
add r7, r7,#1
cmp r7, #2
add r8,r8,r0
blt _phand


mov r1,r8
ldr r0, address_of_message 
bl printf

/*If the user has hit a 21 on the first 2 cards, skip the hit or stay portion and finish dealers hand*/
cmp r1, #21
BEQ _dealerhand


_dealerhand:
_exit:
/*Pop back the lr and exit the program*/

pop {lr} 
bx lr


/*Addresses for all my significant memory allocations*/
address_of_opening: .word opening
address_of_opening2: .word opening2
address_of_continue: .word continue
address_of_continueA: .word continueA
address_of_hitorstay: .word hitorstay
address_of_firstcards: .word firstcards
address_of_dfirstcards: .word dfcards
address_of_hit: .word hit
card_1: .word card1
card_2: .word card2
pcard_total: .word total
dcard_total: .word total2
pagain: .word pagain1
address_of_message: .word message
address_of_finish: .word finish
address_of_lose: .word lose
address_of_win: .word win
address_of_tie: .word tie
address_of_plose21: .word lose21
address_of_playagain: .word playagain


/*External Functions*/
.global printf
.global scanf
.global time
.global srand
.global rand